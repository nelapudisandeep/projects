# making a snake game in python
# we are using the turtle module in python
# importing module

# //////////////////**********************************************************************
# ***************************************************************************************************************
# ***************** Snaky Py Game  *****************//////////////////////
# use w key on the keyboard to move up
# use s key on the keyboard to move down
# use a key on the keyboard to move left
# use d key on the keyboard to move right
# ///////////////********** INSTRUCTIONS ****************/////////////////
#  THE SNAKE SHOULD NOT TOUCH IT'S OWN BODY 
#  THE SNAKE SHOULD NOT TOUCH THE WALLS OF THE CANVAS
# IF IT EATS THE FOOD IT GETS 10 POINTS



import turtle
import time
import random
delay = 0.1

# Score
score = 0
high_score = 0

wn = turtle.Screen()
wn.title('Snaky py')
wn.bgcolor("black")
wn.setup(width=700,height=700)
wn.tracer(0) #sets the animations to zero
#  the actual code of the game goes here!!!

# snake head
head = turtle.Turtle()
head.speed(0)
head.shape("square")
head.color("red")
head.penup()
head.goto(0,0)
head.direction = "stop"

# food for snake
food = turtle.Turtle()
food.speed(0)
food.shape("circle")
food.color("lightgreen")
food.penup()
food.goto(0,100)
food.direction = "stop"

segments = []
# pen
pen = turtle.Turtle()
pen.speed(0)
pen.shape("square")
pen.color("white")
pen.penup()
pen.hideturtle()
pen.goto(0,260)
pen.write("Score : 0 | High Score : 0 ",align="center",font=("sans-serif",24,"bold"))

# functions to operate the snake
def go_up():
    if(head.direction != "down"):
        head.direction = "up"
def go_down():
        if(head.direction != "up"):
            head.direction = "down"
def go_right():
        if(head.direction != "left"):
            head.direction = "right"
def go_left():
        if(head.direction != "right"):
            head.direction = "left"

def move():
    if head.direction == "up":
        y = head.ycor()
        head.sety(y+20)
    if head.direction == "down":
        y = head.ycor()
        head.sety(y-20)
    if head.direction == "left":
        x = head.xcor()
        head.setx(x-20)
    if head.direction == "right":
        x = head.xcor()
        head.setx(x+20)
# keyboard bindings
wn.listen()
wn.onkeypress(go_up,"w")
wn.onkeypress(go_down,"s")
wn.onkeypress(go_right,"d")
wn.onkeypress(go_left,"a")
#main game loop
while True:
    wn.update()
    # checking the border collision
    if(head.xcor()>290 or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290):
        time.sleep(2)
        head.goto(0,0)
        head.direction = "stop"

        # hide the segments
        for segment in segments:
            segment.goto(1000,1000)

        # clear the segments list
        segments.clear()

        # Rest the score
        score = 0
        # Rest the delay
        delay = 0.1
        # Resest score
        score = 0
        #reset the delay
        delay = 0.1

        pen.clear()
        pen.write("Score : {} | High Score : {}".format(score,high_score),align="center",font=("sans-serif",24,"bold"))

    # collision with food 
    if head.distance(food)<20:
        # moving the food to random position
        x = random.randint(-290,290)
        y = random.randint(-290,290)
        food.goto(x,y)   

        #add a segment
        new_segment = turtle.Turtle()
        new_segment.speed(0)
        new_segment.shape("square")
        new_segment.color("grey")
        new_segment.penup()
        segments.append(new_segment)
        #Increase the score

        delay -= 0.001
        score += 10

        if(score > high_score):
            high_score = score

        pen.clear()
        pen.write("Score : {} | High Score : {}".format(score,high_score),align="center",font=("sans-serif",24,"bold"))
    # move the end segment first in reverse order
    for index in range(len(segments)-1,0,-1):
        x = segments[index-1].xcor()
        y = segments[index-1].ycor()
        segments[index].goto(x,y)

    # move the segment 0 to head
    if(len(segments) > 0):
        x = head.xcor()
        y = head.ycor()
        segments[0].goto(x,y) 
    move()
    # check for head collisions with the body segments
    for segment in segments:
        if(segment.distance(head)<20):
            time.sleep(1)
            head.goto(0,0)
            head.direction = "stop"

            # Hide the segments
            for segment in segments:
                segment.goto(1000,1000)
            
            # Clear the segments List
            segments.clear()


    time.sleep(delay)


wn.mainloop() # this line makes the window open for us!!
